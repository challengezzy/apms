package com.apms.bs.dataprase;

import org.apache.log4j.Logger;

import smartx.framework.common.vo.NovaLogger;

public class ReportParseUtil {

	
	private static Logger logger = NovaLogger.getLogger(ReportParseUtil.class);	
	
	/**
	 * 获取可以转换为数字的字符串，或者null,前面前面包含N,则表示负数
	 * @param oldStr
	 * @return
	 */
	public static String getNumberStr(String oldStr){
		String newStr;
		if (oldStr == null || oldStr.contains("--") ||  oldStr.contains("XX") ||  oldStr.contains("EE") )
		{ 
			//newStr = null;
			newStr = "-1"; //黄磊 为了和正常的0，进行区别，这里的数据均使用-1
		}else if("00".equals(oldStr) ){
			//增加对"00"的解析处理，直接返回0
			newStr = "0";
		}else{
			//如果为负数，字符串中可能包含"N",替换成"-"
			if(oldStr.trim().startsWith("N")){
				oldStr = "-"+oldStr.substring(1);//去年前面的N,加负号
			}
			
			newStr = oldStr.trim();
		}
		
		return newStr;
	}
	
	/**
	 * 获取可以转换为数字的字符串，或者null,前面前面包含N,则表示负数
	 * @param oldStr
	 * @return
	 */
	public static String getNumberStr4NullDefault(String oldStr,String defaultStr){
		String newStr;
		if (oldStr == null || oldStr.contains("--") ||  oldStr.contains("XX") )
		{ 
			//newStr = null;
			newStr = defaultStr;
		}else{
			//如果为负数，字符串中可能包含"N",替换成"-"
			if(oldStr.trim().startsWith("N")){
				oldStr = "-"+oldStr.substring(1);//去年前面的N,加负号
			}
			
			newStr = oldStr.trim();
		}
		
		return newStr;
	}
	
	/**
	 * 判断字符串为空，或"--", "XX",返回给定的默认值
	 * @param oldStr
	 * @param defaultStr
	 * @return
	 */
	public static String getDefaultForXXStr(String oldStr, String defaultStr){
		if (oldStr == null || oldStr.contains("--") ||  oldStr.contains("XX") )
		{ 
			return defaultStr;
		}
		return oldStr;
	}
	
	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param decimalPoint 小数点位置，整数部分长度
	 * @param fieldName 字段名称
	 * @return
	 */
	public static Float strToFloatWithIntPostion(String str,int decimalPoint,String fieldName) throws Exception{
		Float res = 0f;
		
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str) )
		{
			try{
				res = new Float( str.substring(0,decimalPoint) +"." + str.substring(decimalPoint,str.length()) );
			}catch (Exception e) {
				throw new Exception("字段["+fieldName+"]字符串["+str+"]转换为["+decimalPoint+"]个整数位的小数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param decimalPoint 小数点位置，整数部分长度
	 * @param fieldName 字段名称
	 * @param isIgnoreExp 是否忽略转换异常
	 * @return
	 */
	public static Float strToFloatWithIntPostion(String str, int decimalPoint, String fieldName, boolean isIgnoreExp) throws Exception {
		Float res = 0f;
		try {
			res = strToFloatWithIntPostion(str, decimalPoint, fieldName);
		} catch (Exception e) {
			if(isIgnoreExp){
				logger.debug(e.toString());
			}else{
				throw e;
			}
		}

		return res;
	}

	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param decimalPoint 小数点位置，整数部分长度
	 * @return
	 */
	public static Float strToFloatWithIntPostion(String str,int decimalPoint) throws Exception{
		Float res = 0f;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			try{
				res = new Float( str.substring(0,decimalPoint) +"." + str.substring(decimalPoint,str.length()) );
			}catch (Exception e) {
				throw new Exception("字符串["+str+"]转换为["+decimalPoint+"]个整数位的小数失败！");
			}
		}
		
		return res;
	}
	/**
	 * 字符串转换为带小数点格式的字符串
	 * @param str 字符串
	 * @param decimalPoint 小数点位置，整数部分长度
	 * @return
	 */
	public static String strToStrWithIntPostion(String str,int decimalPoint){
		str  = getNumberStr(str);
		
		String res = null;
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			res =  str.substring(0,decimalPoint) +"." + str.substring(decimalPoint,str.length());
		}else{
			res = str;
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param persision 精度，小数点后位数
	 * @param fieldName 字段名称
	 * @param isIgnoreExp 是否忽略异常
	 * @return
	 */
	public static Float strToFloatWithDecimalPostion(String str, int decimalPoint, String fieldName, boolean isIgnoreExp) throws Exception {
		Float res = 0f;
		try {
			res = strToFloatWithDecimalPostion(str, decimalPoint, fieldName);
		} catch (Exception e) {
			if(isIgnoreExp){
				logger.debug(e.toString());
			}else{
				throw e;
			}
		}

		return res;
	}
	
	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param persision 精度，小数点后位数
	 * @param fieldName 字段名称
	 * @return
	 */
	public static Float strToFloatWithDecimalPostion(String str,int persision,String fieldName) throws Exception{
		Float res = 0f;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			int decimalPoint = str.length()-persision;
			try{
				res = new Float( str.substring(0,decimalPoint) +"." + str.substring(decimalPoint,str.length()) );
				
			}catch (Exception e) {
				throw new Exception("字段["+fieldName+"]字符串["+str+"]转换为["+decimalPoint+"]个小数位的浮点数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为数字
	 * @param str 字符串
	 * @param persision 精度，小数点后位数
	 * @return
	 */
	public static Float strToFloatWithDecimalPostion(String str,int persision) throws Exception{
		Float res = 0f;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			
			int decimalPoint = str.length()-persision;
			try{
				res = new Float( str.substring(0,decimalPoint) +"." + str.substring(decimalPoint,str.length()) );
				
			}catch (Exception e) {
				throw new Exception("字符串["+str+"]转换为["+decimalPoint+"]个小数位的浮点数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为
	 * @param str
	 * @return
	 * @throws Exception
	 */
	public static Float strToFloat(String str) throws Exception{
		Float res = 0f;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			try{
				res = new Float( str );
				
			}catch (Exception e) {
				throw new Exception("字符串["+str+"]转换为浮点数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为小数
	 * @param str
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	public static Float strToFloat(String str,String fieldName) throws Exception{
		Float res = 0f;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			if(str.trim().startsWith("N")){
				str = "-"+str.substring(1);//去年前面的N,加负号
			}
			try{
				res = new Float( str );
				
			}catch (Exception e) {
				throw new Exception("字段["+fieldName+"]字符串["+str+"]转换为浮点数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为小数
	 * @param str
	 * @param fieldName
	 * @param isIgnoreExp 是否忽略异常
	 * @return
	 * @throws Exception
	 */
	public static Float strToFloat(String str,String fieldName, boolean isIgnoreExp) throws Exception {
		Float res = 0f;
		try {
			res = strToFloat(str, fieldName);
		} catch (Exception e) {
			if(isIgnoreExp){
				logger.debug(e.toString());
			}else{
				throw e;
			}
		}

		return res;
	}
	
	/**
	 * 字符串转换为整数
	 * @param str
	 * @param fieldName 字段名称
	 * @return
	 * @throws Exception
	 */
	public static Integer strToInteger(String str) throws Exception{
		Integer res = 0;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			try{
				res = new Integer( str );
				
			}catch (Exception e) {
				throw new Exception("字符串["+str+"]转换为浮点数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为整数
	 * @param str
	 * @param fieldName 字段名称
	 * @return
	 * @throws Exception
	 */
	public static Integer strToInteger(String str,String fieldName) throws Exception{
		Integer res = 0;
		str  = getNumberStr(str);
		if(str != null && !"0".equals(str) && !"-1".equals(str))
		{
			try{
				res = new Integer( str );
				
			}catch (Exception e) {
				throw new Exception("字段["+fieldName+"]字符串["+str+"]转换为整数失败！");
			}
		}
		
		return res;
	}
	
	/**
	 * 字符串转换为整数
	 * @param str 字符串
	 * @param fieldName 字段含义
	 * @param isIgnoreExp 是否忽略异常
	 * @return
	 * @throws Exception
	 */
	public static Integer strToInteger(String str,String fieldName, boolean isIgnoreExp) throws Exception {
		Integer res = 0;
		try {
			res = strToInteger(str, fieldName);
		} catch (Exception e) {
			if(isIgnoreExp){
				logger.info(e.toString());
			}else{
				throw e;
			}
		}

		return res;
	}
	
	/**
	 * 翻译YES 和 NOX的字符串
	 */
	public static int getBooleanYesStr(String str){
		if(str == null || "NOX".equals(str) || str.contains("XX") ){
			return 0;
		}else if( "YES".equals(str) ) {
			return 1;
		}else{//未知
			return 0;
		}
	}
	
}
